name: Publish

on:
  workflow_dispatch: # 手动触发
  push:
    tags:
    - '*'


jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      # .Net 环境
      - name: Setup .NET
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: 5.0.100
        
      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore
          cd ./src/Ray.BiliBiliTool.Console
          dotnet publish --self-contained false -o ./bin/Publish/net5-dependent
          cd ./bin/Publish
          zip --junk-paths bilibili-tool-v${{ github.ref }}-net5-dependent net5-dependent
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: /src/Ray.BiliBiliTool.Console/bin/Publish/bilibili-tool-v${{ github.ref }}-net5-dependent.zip
          asset_name: bilibili-tool-v${{ github.ref }}-net5-dependent.zip
          asset_content_type: application/zip
